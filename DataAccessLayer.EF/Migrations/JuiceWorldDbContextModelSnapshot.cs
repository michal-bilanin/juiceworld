// <auto-generated />
using System;
using System.Collections.Generic;
using JuiceWorld.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JuiceWorld.Migrations
{
    [DbContext(typeof(JuiceWorldDbContext))]
    partial class JuiceWorldDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JuiceWorld.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Brno",
                            Country = "Czech Republic",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(3193),
                            HouseNumber = "18",
                            Name = "Jozef Tringál",
                            Street = "Hrnčířská",
                            Type = "Shipping",
                            UserId = 1,
                            ZipCode = "60200"
                        },
                        new
                        {
                            Id = 2,
                            City = "Brno",
                            Country = "Czech Republic",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(4169),
                            HouseNumber = "18",
                            Name = "Jozef Tringál",
                            Street = "Hrnčířská",
                            Type = "Billing",
                            UserId = 1,
                            ZipCode = "60200"
                        },
                        new
                        {
                            Id = 3,
                            City = "Bratislava",
                            Country = "Slovakia",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(4172),
                            HouseNumber = "2",
                            Name = "Ignác Lakeť",
                            Street = "Malý trh",
                            Type = "Billing",
                            UserId = 2,
                            ZipCode = "81108"
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("ChangedColumns")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PrimaryKey")
                        .HasColumnType("integer");

                    b.Property<string>("TrailType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("JuiceWorld.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(5140),
                            ProductId = 1,
                            Quantity = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(5486),
                            ProductId = 2,
                            Quantity = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(5488),
                            ProductId = 3,
                            Quantity = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2573),
                            Name = "MediPharma"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2909),
                            Name = "Royal Pharmaceuticals"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2922),
                            Name = "Liniment Pharmaceuticals"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2923),
                            Name = "Vermodje"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2924),
                            Name = "Balkan Pharmaceuticals"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2925),
                            Name = "Anfarm"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2925),
                            Name = "Bayer"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2926),
                            Name = "Novartis"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2926),
                            Name = "Pfizer"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2927),
                            Name = "Royal Pharmaceuticals"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2928),
                            Name = "Galenika"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2928),
                            Name = "Zambon"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2929),
                            Name = "GlobalPharma"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2930),
                            Name = "BM"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(2930),
                            Name = "Sport Pharmaceuticals"
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Arrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(4464),
                            DeliveryType = "Standard",
                            PaymentMethodType = "Monero",
                            Status = "Pending",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(4899),
                            DeliveryType = "Express",
                            PaymentMethodType = "Monero",
                            Status = "Delivered",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(4900),
                            DeliveryType = "Standard",
                            PaymentMethodType = "Monero",
                            Status = "Pending",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(5688),
                            OrderId = 1,
                            ProductId = 9,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6000),
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6001),
                            OrderId = 2,
                            ProductId = 8,
                            Quantity = 12
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6002),
                            OrderId = 2,
                            ProductId = 1,
                            Quantity = 9
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(3470),
                            Description = "100 tablets, each 50mg",
                            ManufacturerId = 1,
                            Name = "Anadrol (Oxymetholone)",
                            Price = 4199m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4364),
                            Description = "30 tablets, each 1mg",
                            ManufacturerId = 1,
                            Name = "Anastrozole",
                            Price = 2399m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4367),
                            Description = "30 tablets, each 1mg",
                            ManufacturerId = 2,
                            Name = "Anastrozole / Arimidex",
                            Price = 1899m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4368),
                            Description = "100 tablets, each 10mg",
                            ManufacturerId = 4,
                            Name = "Anavar (Oxandrolone)",
                            Price = 2399m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4370),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 3,
                            Name = "Boldenone Undecylenate",
                            Price = 2099m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4371),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Boldenone Undecylenate",
                            Price = 2399m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4372),
                            Description = "10mg",
                            ManufacturerId = 1,
                            Name = "BPC-157",
                            Price = 2599m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4373),
                            Description = "20 tablets, each 1mg",
                            ManufacturerId = 14,
                            Name = "Cabaser Cabergoline",
                            Price = 3299m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4374),
                            Description = "30 tablets, each 20mg",
                            ManufacturerId = 15,
                            Name = "Cialis Sex Med",
                            Price = 1899m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4375),
                            Description = "5mg",
                            ManufacturerId = 1,
                            Name = "CJC1295 DAC",
                            Price = 2899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4376),
                            Description = "100 tablets, each 40mcg",
                            ManufacturerId = 5,
                            Name = "Clenbuterol",
                            Price = 2399m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4377),
                            Description = "24 tablets, each 50mg",
                            ManufacturerId = 6,
                            Name = "Clomiphene Citrate",
                            Price = 1799m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4393),
                            Description = "60 tablets, each 50mg",
                            ManufacturerId = 1,
                            Name = "Clomipfene (Clomid)",
                            Price = 2199m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4394),
                            Description = "100 tablets, each 10mg",
                            ManufacturerId = 5,
                            Name = "Dianabol (Methandienone)",
                            Price = 2099m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4396),
                            Description = "270g (30 dávek)",
                            ManufacturerId = 13,
                            Name = "DMAA Pre Workout Booster",
                            Price = 2599m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4397),
                            Description = "200mg/ml - 10ml",
                            ManufacturerId = 3,
                            Name = "Drostanolone Enanthate",
                            Price = 2199m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4398),
                            Description = "100mg/ml - 10ml",
                            ManufacturerId = 3,
                            Name = "Drostanolone Propionate",
                            Price = 2099m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4399),
                            Description = "30 tablets, each 25mg",
                            ManufacturerId = 1,
                            Name = "Exemestane",
                            Price = 2399m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4400),
                            Description = "30 tablets, each 25mg",
                            ManufacturerId = 2,
                            Name = "Exemestane Aromasin",
                            Price = 2099m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4401),
                            Description = "1mg",
                            ManufacturerId = 1,
                            Name = "Follistatin 334",
                            Price = 2899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4403),
                            Description = "10mg",
                            ManufacturerId = 1,
                            Name = "GHRP-6",
                            Price = 2199m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 22,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4404),
                            Description = "5000iu",
                            ManufacturerId = 15,
                            Name = "HCG 1vial",
                            Price = 1999m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4405),
                            Description = "5000iu",
                            ManufacturerId = 1,
                            Name = "HCG",
                            Price = 2199m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4406),
                            Description = "5mg",
                            ManufacturerId = 1,
                            Name = "HGH Fragment 176-191",
                            Price = 2399m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 25,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4407),
                            Description = "100iu",
                            ManufacturerId = 1,
                            Name = "HGH (Somatropin)",
                            Price = 12999m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 26,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4408),
                            Description = "1mg",
                            ManufacturerId = 1,
                            Name = "IGF-1 LR3",
                            Price = 2899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 27,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4418),
                            Description = "30 tablets, each 20mg",
                            ManufacturerId = 2,
                            Name = "Isotretinoin Roaccutane",
                            Price = 1999m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 28,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4472),
                            Description = "400mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Mass 400 - Testo/Decamix (5:3)",
                            Price = 3299m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 29,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4473),
                            Description = "100mg/ml - 10ml",
                            ManufacturerId = 2,
                            Name = "Masteron Drostanolone Propionate",
                            Price = 2099m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 30,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4478),
                            Description = "200mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Masterone Enanthate (Drosta-E)",
                            Price = 3899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 31,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4479),
                            Description = "10mg",
                            ManufacturerId = 1,
                            Name = "MT2",
                            Price = 2399m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 32,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4480),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 3,
                            Name = "Nandrolone Decanoate",
                            Price = 2099m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 33,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4481),
                            Description = "100mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Primobolan Enanthate",
                            Price = 3899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 34,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4482),
                            Description = "100 tablets, each 25mg",
                            ManufacturerId = 2,
                            Name = "Proviron",
                            Price = 2099m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 35,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4483),
                            Description = "30 tablets, each 100mg",
                            ManufacturerId = 12,
                            Name = "Sildenafil",
                            Price = 2099m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 36,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4484),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Sustanon 250",
                            Price = 2899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 37,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4485),
                            Description = "60 tablets, each 20mg",
                            ManufacturerId = 1,
                            Name = "Tamoxifen",
                            Price = 2099m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 38,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4486),
                            Description = "60 tablets, each 20mg",
                            ManufacturerId = 2,
                            Name = "Tamoxifen (Nolvadex)",
                            Price = 1799m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 39,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4487),
                            Description = "100 tablets, each 25mcg",
                            ManufacturerId = 2,
                            Name = "T3 Cytomel",
                            Price = 1999m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 40,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4488),
                            Description = "30 tablets, each 20mg",
                            ManufacturerId = 1,
                            Name = "Tadalafil",
                            Price = 1799m,
                            UsageType = "Oral"
                        },
                        new
                        {
                            Id = 41,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4490),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Testosterone Cypionate",
                            Price = 2399m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 42,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4491),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Testosterone Enanthate",
                            Price = 2399m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 43,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4492),
                            Description = "250mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Testosterone Mix Sustanon",
                            Price = 2899m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 44,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4493),
                            Description = "100mg/ml - 10ml",
                            ManufacturerId = 3,
                            Name = "Trenbolone Acetate",
                            Price = 2399m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 45,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4494),
                            Description = "200mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Trenbolone Enanthate",
                            Price = 2599m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 46,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4495),
                            Description = "200mg/ml - 10ml",
                            ManufacturerId = 1,
                            Name = "Trenbolone Mix",
                            Price = 2599m,
                            UsageType = "Injectable"
                        },
                        new
                        {
                            Id = 47,
                            Category = "Testosterone",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 4, DateTimeKind.Utc).AddTicks(4496),
                            Description = "100 tablets, each 10mg",
                            ManufacturerId = 1,
                            Name = "Turanabol (Chlorodehydromethyltestosterone)",
                            Price = 1999m,
                            UsageType = "Oral"
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Great product! 💪💪💪💪",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6197),
                            ProductId = 1,
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "Good product!",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6621),
                            ProductId = 2,
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Body = "Average product!",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6622),
                            ProductId = 3,
                            Rating = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PasswordHashRounds")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "I am a steroid user!",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 29, 997, DateTimeKind.Utc).AddTicks(4048),
                            Email = "user@example.com",
                            PasswordHash = "dSs7DWCWzqpvCzoGn9H6IoZUkRkdnetV5EdJ6rmT+vo=",
                            PasswordHashRounds = 10,
                            PasswordSalt = "PnYmiHRMgEYvXgsfe7JlJA==",
                            UserName = "user",
                            UserRole = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "I am a steroid Admin!",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(2289),
                            Email = "admin@example.com",
                            PasswordHash = "dZI6hJRGquF124s9IYIj786xZ/FDcXXjwMHEbCtkeSU=",
                            PasswordHashRounds = 10,
                            PasswordSalt = "SB6iX5zHwTMFiIud4D1aMg==",
                            UserName = "admin",
                            UserRole = "Admin"
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.WishListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishListItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(6808),
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(7017),
                            ProductId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 14, 18, 8, 30, 2, DateTimeKind.Utc).AddTicks(7018),
                            ProductId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("JuiceWorld.Entities.Address", b =>
                {
                    b.HasOne("JuiceWorld.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JuiceWorld.Entities.AuditTrail", b =>
                {
                    b.HasOne("JuiceWorld.Entities.User", "User")
                        .WithMany("AuditTrails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JuiceWorld.Entities.CartItem", b =>
                {
                    b.HasOne("JuiceWorld.Entities.Order", null)
                        .WithMany("CartItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("JuiceWorld.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuiceWorld.Entities.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Order", b =>
                {
                    b.HasOne("JuiceWorld.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuiceWorld.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JuiceWorld.Entities.OrderProduct", b =>
                {
                    b.HasOne("JuiceWorld.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuiceWorld.Entities.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Product", b =>
                {
                    b.HasOne("JuiceWorld.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Review", b =>
                {
                    b.HasOne("JuiceWorld.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuiceWorld.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JuiceWorld.Entities.WishListItem", b =>
                {
                    b.HasOne("JuiceWorld.Entities.Product", "Product")
                        .WithMany("WishListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuiceWorld.Entities.User", "User")
                        .WithMany("WishListItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Order", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("JuiceWorld.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrdersProducts");

                    b.Navigation("Reviews");

                    b.Navigation("WishListItems");
                });

            modelBuilder.Entity("JuiceWorld.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AuditTrails");

                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("WishListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
